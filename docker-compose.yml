version: '3.8'

services:
  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: pet-rescue-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-petrescue123}
      MYSQL_DATABASE: ${DB_NAME:-pet_rescue_db}
      MYSQL_USER: ${DB_USER:-petrescue}
      MYSQL_PASSWORD: ${DB_PASSWORD:-petrescue123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - pet-rescue-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Aplicação Node.js (Backend)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: pet-rescue-api
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-pet_rescue_db}
      - DB_USER=${DB_USER:-petrescue}
      - DB_PASSWORD=${DB_PASSWORD:-petrescue123}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - pet-rescue-network
    command: npm run dev

  # Aplicação React (Frontend)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.client
    container_name: pet-rescue-client
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - pet-rescue-network
    stdin_open: true
    tty: true

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: pet-rescue-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pet-rescue-network
    command: redis-server --appendonly yes

  # Nginx para proxy reverso (produção)
  nginx:
    image: nginx:alpine
    container_name: pet-rescue-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - uploads_data:/usr/share/nginx/html/uploads
    depends_on:
      - api
      - client
    networks:
      - pet-rescue-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  pet-rescue-network:
    driver: bridge
